{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.js","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Dialogs.js","hoc/WithAuthRedirect.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","Message","props","className","s","dialog","message","DialogItem","path","id","active","to","name","maxLength30","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","dialogElements","dialogsData","map","d","key","messageEelements","messagesData","m","isAuth","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uFCMnKC,EAJC,SAACC,GACb,OAAO,yBAAKC,UAAWC,IAAEC,QAASH,EAAMI,U,QCO7BC,EAPI,SAACL,GAChB,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OAAO,yBAAKN,UAAWC,IAAEC,OAAS,IAAMD,IAAEM,QACtC,kBAAC,IAAD,CAASC,GAAIH,GAAON,EAAMU,Q,yCCE5BC,EAAcC,YAAiB,IA6C/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBT,KAAM,iBAAkBU,UAAWC,IACzEC,SAAU,CAACC,IAAUZ,MAE7B,6BACI,6CAQDa,EA7CC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAiBF,EAAMG,YACtBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMqB,IAAKD,EAAEvB,GAAIA,GAAIuB,EAAEvB,QAErDyB,EAAmBP,EAAMQ,aACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAS9B,QAAS8B,EAAE9B,QAAS2B,IAAKG,EAAE3B,QAMlD,OAAKP,EAAMmC,OAGP,yBAAKlC,UAAWC,IAAEkC,SACd,yBAAKnC,UAAWC,IAAEmC,cACbV,GAEL,yBAAK1B,UAAWC,IAAEoC,UACd,6BAAMN,IAEV,kBAACnB,EAAD,CAAqBG,SAdT,SAACuB,GACjBvC,EAAMwC,YAAYD,EAAOE,oBAGH,kBAAC,IAAD,CAAUhC,GAAI,Y,uDCrBxCiC,EAA6B,SAACjB,GAAD,MAAY,CACzCU,OAAQV,EAAMkB,KAAKR,SCeRS,sBACXC,aAfkB,SAACpB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACoB,GACtB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,YAAyBN,UDRf,SAACO,GAAe,IAErCC,EAFoC,iLAIlC,OAAKC,KAAKlD,MAAMmC,OACT,kBAACa,EAAcE,KAAKlD,OADI,kBAAC,IAAD,CAAUS,GAAG,eAJV,GAEV0C,IAAMH,WAQtC,OADqCH,YAAQH,EAARG,CAAoCI,KCI9DL,CAGbpB","file":"static/js/5.b05867bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__30N77\",\"dialogsItems\":\"Dialogs_dialogsItems__SXOdY\",\"active\":\"Dialogs_active__WNKXE\",\"messages\":\"Dialogs_messages__29zOo\",\"message\":\"Dialogs_message__1Vq2W\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props)=>{\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) =>{\r\n    let path = \"/Dialogs/\" + props.id;\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { Textarea } from '../Common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst Dialogs = (props) => {\r\n    \r\n    let state = props.dialogsPage;\r\n\r\n    let dialogElements = state.dialogsData\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messageEelements = state.messagesData\r\n        .map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageEelements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your message\"} name={'newMessageBody'} component={Textarea}\r\n                    validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\nexport const withAuthRedirect =(Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}","import { sendMessageActionCreator } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs); "],"sourceRoot":""}